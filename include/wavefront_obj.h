/*    ____         ________     __      _        ______  
 *   |  _ \_      |  ______|   |  \    | |     _/  ____\
 *   | | \_ \_    |  |         |   \   | |    /  _/   
 *   | |   \  |   |  |_____    | |\ \  | |   |  |   _____ 
 *   | |    | |   |  ______|   | | \ \ | |   |  |  |___  | 
 *   | |  _/ _|   |  |         | |  \ \| |    \  \    / /
 *   | |_/ _/     |  |_____    | |   \   |     \_ \__/ /
 *   |____/       |________|   |_|    \__|       \____/
 *               
 * __________________________________________________________
 * __________________________________________________________
 *                       Project DENG 
 *
 *
 * Copyright (C) 2020 - 2021
 * This Software is licensed under Apache License as described 
 * in the LICENSE.md file, which you should have recieved with 
 * this distribution.
 * 
 * You may reproduce and distribute copies of the
 * Work or Derivative Works thereof in any medium, with or without
 * modifications, and in Source or Object form, provided that You
 * meet the following conditions:
 *
 * (a) You must give any other recipients of the Work or
 *     Derivative Works a copy of this License; and
 *
 * (b) You must cause any modified files to carry prominent notices
 *     stating that You changed the files; and
 *
 * (c) You must retain, in the Source form of any Derivative Works
 *     that You distribute, all copyright, patent, trademark, and
 *     attribution notices from the Source form of the Work,
 *     excluding those notices that do not pertain to any part of
 *     the Derivative Works; and
 *
 * (d) If the Work includes a "NOTICE" text file as part of its
 *     distribution, then any Derivative Works that You distribute must
 *     include a readable copy of the attribution notices contained
 *     within such NOTICE file, excluding those notices that do not
 *     pertain to any part of the Derivative Works, in at least one
 *     of the following places: within a NOTICE text file distributed
 *     as part of the Derivative Works; within the Source form or
 *     documentation, if provided along with the Derivative Works; or,
 *     within a display generated by the Derivative Works, if and
 *     wherever such third-party notices normally appear. The contents
 *     of the NOTICE file are for informational purposes only and
 *     do not modify the License. You may add Your own attribution
 *     notices within Derivative Works that You distribute, alongside
 *     or as an addendum to the NOTICE text from the Work, provided
 *     that such additional attribution notices cannot be construed
 *     as modifying the License.
 *
 * You may add Your own copyright statement to Your modifications and
 * may provide additional or different license terms and conditions
 * for use, reproduction, or distribution of Your modifications, or
 * for any such Derivative Works as a whole, provided Your use,
 * reproduction, and distribution of the Work otherwise complies with
 * the conditions stated in this License.
 * ----------------------------------------------------------------
 *  Name: wavefront_obj - Wavefront Object format parser
 *  Purpose: Provide functions for parsing Wavefront OBJ format
 *  Author: Karl-Mihkel Ott
 */ 


#ifndef __WAVEFRONT_OBJ_H
#define __WAVEFRONT_OBJ_H


#ifdef __cplusplus
extern "C" {
#endif
    #define __DAS_MAX_WORD_SIZE                            512
    #ifdef __WAVEFRONT_OBJ_C
        #include <stdlib.h>
        #include <stdio.h>
        #include <stdint.h>
        #include <string.h>
        #include <float.h>
        #include <limits.h>

        #define BUFFER_CAP(N, T) N * sizeof(T) 
        #include <common/base_types.h>
        #include <common/cerr_def.h>
        #include <common/common.h>
        #include <data/assets.h>
        #include <common/hashmap.h>
        #include <common/uuid.h>

        #include <data/assets.h>
        #include <data/das_runtime.h>
        #include <data/obj_tokens.h>

        /// Error handling macros
        #define __DAS_WAVEFRONT_SYNTAX_ERROR(line, desc)        fprintf(stderr, "Wavefront OBJ syntax error on line %ld: %s\n", line, desc), \
                                                                exit(EXIT_FAILURE)

        #define __DAS_WAVEFRONT_EMPTY_OBJECT(line)              fprintf(stderr, "Wavefront OBJ error, empty object on line %ld\n", line), \
                                                                exit(EXIT_FAILURE)

        #define __DAS_WAVEFRONT_EMPTY_GROUP(line)               fprintf(stderr, "Wavefront OBJ error, empty group specified on line %ld\n", line), \
                                                                exit(EXIT_FAILURE)


        #define __DAS_TOO_MANY_ARGS(line)                       fprintf(stderr, "Wavefront OBJ error, too many arguments line %ld\n", line), \
                                                                exit(EXIT_FAILURE)
        
        #define __DAS_NOT_ENOUGH_ARGS(line)                     fprintf(stderr, "Wavefront OBJ error, not enough arguments on line %ld\n", line), \
                                                                exit(EXIT_FAILURE)

        #define __DAS_TOO_LONG_WORD(line)                       fprintf(stderr, "Wavefront OBJ error, too long word %ld\n", line), \
                                                                exit(EXIT_FAILURE)


        #define __DAS_DEFAULT_MEM_CAP                           128
    #endif


    /*
     * Type specifier for entities used in OBJ files
     */
    typedef enum das_WavefrontObjEntityType {
        DAS_ENTITY_TYPE_GROUP       = 0,
        DAS_ENTITY_TYPE_OBJECT      = 1,
        DAS_ENTITY_TYPE_FIRST       = DAS_ENTITY_TYPE_GROUP,
        DAS_ENTITY_TYPE_LAST        = DAS_ENTITY_TYPE_OBJECT,
    } das_WavefrontObjEntityType;

    
    /*
     * Struct for entity(groups and objects) positions and names that are 
     * used in Wavefront OBJ files
     */
    typedef struct das_WavefrontObjEntityData {
        char name[__DAS_MAX_WORD_SIZE];
        char *start_ptr;
        das_IndicesDynamic ind_data;
        size_t ind_cap;

        das_VertDynamic vert_data;
        size_t v_cap;
        size_t vt_cap;
        size_t vn_cap;
    } das_WavefrontObjEntityData;

    
    /*
     * Main entity structure for Wavefront obj entities
     */
    typedef struct das_WavefrontObjEntity {
        das_WavefrontObjEntityData data;
        das_WavefrontObjEntityType type;
    } das_WavefrontObjEntity;

    #ifdef __WAVEFRONT_OBJ_C
        static char *__buffer = NULL;
        static deng_ui64_t __buf_len = 0;

        
        /*
         * This data structure is used in block parsing only
         */
        typedef struct __das_IndexBlock {
            deng_ui32_t pos;
            deng_ui32_t tex;
            deng_ui32_t norm;
        } __das_IndexBlock;

        
        
        /*
         * Read all file data from stream to heap allocated buffer
         */
        static void __das_ReadToBuffer(char *file_name);


        /*
         * Free the allocated buffer used in data reading
         */
        static void __das_FreeBuffer();


        /*
         * Parse one line statement
         */
        static __das_WavefrontObjSpecType __das_ParseStatement(char **words, size_t word_c, deng_ui64_t line);


        /*
         * Check if memory reallocations need to be done
         */
        static void __das_ReallocCheck (
            void **p_data, 
            size_t *p_cap, 
            size_t n,
            size_t size,
            char *err_msg
        );


        /*
         * Analyse the given line statement and perform action accordingly
         */
        static void __das_AnalyseStatement (
            char **line_words,
            size_t word_c,
            das_WavefrontObjEntity **p_entities,
            size_t *p_ent_cap,
            size_t *p_ent_c,
            deng_ui64_t lc
        );


        /*
         * Find all text blocks used between beg and beg + len
         */
        static void __das_ExtractBlocks(char *beg, size_t len, char ***p_words, size_t *p_word_c, 
            size_t *p_word_cap, deng_ui64_t max_word_len);

        
        /*
         * Create a new object or group instance for entity type
         */
        static void __das_NewEntity(das_WavefrontObjEntity **p_entities, size_t *p_entity_cap, size_t *p_entity_c, 
            das_WavefrontObjEntityType ent_type, char *name);

        
        /*
         * Copy all face indices to entity structure
         */
        static void __das_CopyFaceIndices(das_WavefrontObjEntity *p_ent, char **words, size_t word_c);

        
        /*
         * Parse a single face block
         */
        static __das_IndexBlock __das_ParseFace(char *face);


        /*
         * Ask the user for specified object instance if needed
         */
        static size_t __das_PromptObjectIndex(size_t *obj_inds, size_t obj_c, 
            das_WavefrontObjEntity *entities, size_t ent_c, char *file_name);

    #endif 



    /*
     * Parse all data in Wavefront OBJ file and write
     * all information about vertices and indices to p_asset
     */
    void das_ParseWavefrontOBJ(das_WavefrontObjEntity **p_ents, size_t *p_ent_c, char *file_name);


    /*
     * Write entity data to a asset and if needed prompt to ask for the correct group
     * that will be used in the asset
     */
    void das_WavefrontObjEntityWritePrompt (
        das_Asset *p_asset, 
        das_WavefrontObjEntity *entities, 
        size_t ent_c,
        char *file_name
    );


    /*
     * Perform cleanup operation for all the memory allocated for entities
     */
    void das_WavefrontObjDestroyEntities(das_WavefrontObjEntity *entities, size_t ent_c);

#ifdef __cplusplus
}
#endif
#endif
