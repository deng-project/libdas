/// DENG: dynamic engine - small but powerful 3D game engine
/// licence: Apache, see LICENCE file
/// file: dam.c - deng asset manager header file
/// author: Karl-Mihkel Ott


#include <stdint.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <fstream>

#include <uuid.h>
#include <assets.h>
#include <das_file.h>
#include <das_loader.h>

static void logData(const Asset &asset);


/// Log all asset data to stdout in wavefront obj compatible format
static void logData(const Asset &asset) {
    printf("# Autogenerated by libdas\n");
    for(uint64_t i = 0; i < asset.vertices.v3d.mul.pn; i++) {
        printf("v %f %f %f\n", asset.vertices.v3d.mul.pos[i].vert_x, asset.vertices.v3d.mul.pos[i].vert_y, 
               asset.vertices.v3d.mul.pos[i].vert_z);
    }

    for(uint64_t i = 0; i < asset.vertices.v3d.mul.tn; i++)
        printf("vt %f %f\n", asset.vertices.v3d.mul.tex[i].tex_x, asset.vertices.v3d.mul.tex[i].tex_y);

    for(uint64_t i = 0; i < asset.vertices.v3d.mul.nn; i++) {
        printf("vn %f %f %f\n", asset.vertices.v3d.mul.norm[i].nor_x, asset.vertices.v3d.mul.norm[i].nor_y, 
               asset.vertices.v3d.mul.norm[i].nor_z);
    }

    for(uint64_t i = 0; i < asset.indices.n - 3; i += 3) {
        printf("f %u/%u/%u %u/%u/%u %u/%u/%u\n", 
               asset.indices.pos[i]+ 1, asset.indices.tex[i]+ 1, asset.indices.norm[i]+ 1,
               asset.indices.pos[i + 1] + 1, asset.indices.tex[i + 1] + 1, asset.indices.norm[i + 1] + 1,
               asset.indices.pos[i + 2] + 1, asset.indices.tex[i + 2] + 1, asset.indices.norm[i + 2] + 1);
    }
}


int main(int argv, char *argc[]) {
    if(argv < 2) {
        printf("Please provide a das file as an argument\n");
        exit(1);
    }

    libdas::das_loader ld = libdas::das_loader(DAS_ASSET_MODE_3D_TEXTURE_MAPPED, ColorData{1.0f, 1.0f, 1.0f, 1.0f}, NULL, NULL, argc[1]);
    Asset &asset = ld.getAsset();
    logData(asset);

    // Cleanup
    free(asset.vertices.v3d.mul.pos);
    free(asset.vertices.v3d.mul.tex);
    free(asset.vertices.v3d.mul.norm);

    free(asset.indices.pos);
    free(asset.indices.tex);
    free(asset.indices.norm);
    return 0;
}
